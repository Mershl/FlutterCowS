{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/app.js","src/assets.js","src/objects/Background.js","src/objects/GameOverOverlay.js","src/objects/Ground.js","src/objects/KnownFlyingObject.js","src/objects/ObstacleSpawner.js","src/objects/Obstacles.js","src/states/Boot.js","src/states/Game.js","src/states/MainMenu.js","src/states/Preloader.js","src/states/index.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","app","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","states","init","game","Phaser","Game","CANVAS","Object","keys","forEach","key","state","add","start","boot","type","frameWidth","frameHeight","url","Background","x","y","width","height","TileSprite","autoScroll","scrollSpeed","prototype","create","constructor","disable","GameOverOverlay","buttonRestart","buttonClose","panel","panelWidth","panelHeight","slickUI","SlickUI","Element","Panel","Text","centerHorizontally","text","alpha","lastScore","toFixed","Button","center","events","onInputUp","basePosition","tween","to","Easing","Exponential","Out","container","displayGroup","bringToTop","Ground","physics","arcade","enableBody","body","setSize","bodySizeY","allowGravity","immovable","KnownFlyingObject","Sprite","animations","bounce","set","fly","isDead","isFalling","timeAlive","spaceKey","input","keyboard","addKey","Keyboard","SPACEBAR","addKeyCapture","update","activePointer","isDown","flap","time","physicsElapsed","velocity","math","clamp","targetAngle","rotation","rotateToAngle","degToRad","play","hitGround","hitObstacle","getSpeed","getTimeAlive","ObstacleSpawner","obstaclesGroup","spawnObstacle","timer","loop","spawnEveryS","difficultyLevel","createObstacle","stop","Obstacles","Group","gapBetween","rangeY","world","targetY","rnd","integerInRange","targetX","spawnTopSpider","frac","topPipeSprite","topPipe","make","sprite","anchor","scale","bottomPipe","damping","mass","move","playerSpeed","gameRef","pipe","destroy","debug","assets","preload","load","path","maxPointers","pageAlignHorizontally","scaleMode","ScaleManager","NO_SCALE","stage","disableVisibilityChange","tweens","frameBased","pack","startSystem","Physics","ARCADE","gravity","kfo","ground","bg","existing","obstacles","obstacleSpawner","isGameOver","collide","objA","gameOver","gameOverOverlay","button","image","showSplashScreen","setPreloadSprite","plugins","Plugin","Boot","Preloader","MainMenu"],"mappings":"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","file":"game.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/*\n * `app` module\n * ============\n *\n * Provides the game initialization routine.\n */\n\n'use strict';\n\n// Import game states.\nvar states = require('./states');\n\nexports.init = function () {\n  var game = new Phaser.Game(720, 720, Phaser.CANVAS);\n\n  // Dynamically add all required game states.\n  Object\n    .keys(states)\n    .forEach(function (key) {\n      game.state.add(key, states[key]);\n    });\n\n  game.state.start('Boot');\n\n  return game;\n};\n","/*\n * `assets` module\n * ===============\n *\n * Declares static asset packs to be loaded using the `Phaser.Loader#pack`\n * method. Use this module to declare game assets.\n */\n\n'use strict';\n\n// -- Splash screen assets used by the Preloader.\nexports.boot = [{\n  key: 'splash-screen',\n  type: 'image'\n}, {\n  key: 'progress-bar',\n  type: 'image'\n}];\n\n// -- General assets used throughout the game.\nexports.game = [{\n  key: 'phaser',\n  type: 'image'\n},\n{\n  key: 'cow',\n  type: 'spritesheet',\n  frameWidth: 128,\n  frameHeight: 96\n},\n{\n  key: 'fg',\n  type: 'image'\n},\n{\n  key: 'bg',\n  type: 'image'\n},\n{\n  key: 'log',\n  url: 'log_full.png',\n  type: 'image'\n},\n{\n  key: 'spider',\n  url: 'spider_full.png',\n  type: 'image'\n},\n{\n  key: 'splash',\n  type: 'image'\n}];\n","/*\n * Background\n * ==========\n *\n */\n\n'use strict';\n\nmodule.exports = Background;\n\nvar scrollSpeed = 300;\n\nfunction Background(game, x, y, width, height) {\n  Phaser.TileSprite.call(this, game, x, y, width, height, 'bg');\n\n  this.autoScroll(-scrollSpeed, 0);\n}\nBackground.prototype = Object.create(Phaser.TileSprite.prototype);\nBackground.prototype.constructor = Background;\n\nBackground.prototype.disable = function () {\n  this.autoScroll(0, 0);\n};\n","/*\n * GameOverOverlay\n * ===============\n *\n */\n\n'use strict';\n\nmodule.exports = GameOverOverlay;\n\nfunction GameOverOverlay(game) {\n  var buttonRestart, buttonClose;\n  var panel;\n  var panelWidth = game.width / 2;\n  var panelHeight = game.height / 3;\n  game.slickUI.add(panel = new SlickUI.Element.Panel(game.width / 2 - panelWidth / 2, (game.height / 5) * 2, panelWidth, panelHeight));\n  panel.add(new SlickUI.Element.Text(10, 0, 'Game Over')).centerHorizontally().text.alpha = 0.5;\n  panel.add(new SlickUI.Element.Text(10, 40, 'Time Alive:')).centerHorizontally();\n  panel.add(new SlickUI.Element.Text(10, 60, game.lastScore.toFixed(2) + 's')).centerHorizontally();\n\n  /* RESTART BUTTON */\n  buttonRestart = new SlickUI.Element.Button(0, panel.height - 80, panel.width / 2 - 4, 80);\n  panel.add(buttonRestart);\n  buttonRestart.add(new SlickUI.Element.Text(0, 0, 'Restart')).center();\n  buttonRestart.events.onInputUp.add(function () {\n    game.state.start('Game');\n  });\n\n  /* CLOSE BUTTON */\n  buttonClose = new SlickUI.Element.Button(panel.width / 2 + 4, panel.height - 80, panel.width / 2 - 4, 80);\n  panel.add(buttonClose);\n  buttonClose.add(new SlickUI.Element.Text(0,0, 'Close')).center();\n  buttonClose.events.onInputUp.add(function () {\n    game.state.start('MainMenu');\n  });\n\n  var basePosition = panel.x;\n\n  game.add.tween(panel).to( {x: basePosition}, 500, Phaser.Easing.Exponential.Out, true);\n  game.slickUI.container.displayGroup.bringToTop(panel.container.displayGroup);\n}\n","/*\n * Ground\n * ======\n *\n */\n\n'use strict';\n\nmodule.exports = Ground;\n\nvar bodySizeY = 54;\nvar scrollSpeed = 400;\n\nfunction Ground(game, x, y, width, height) {\n  Phaser.TileSprite.call(this, game, x, y, width, height, 'fg');\n\n  this.autoScroll(-scrollSpeed, 0);\n\n  this.game.physics.arcade.enableBody(this);\n  this.body.setSize(width, bodySizeY, 0, height - bodySizeY);\n  this.body.allowGravity = false;\n  this.body.immovable = true;\n}\nGround.prototype = Object.create(Phaser.TileSprite.prototype);\nGround.prototype.constructor = Ground;\n\nGround.prototype.disable = function () {\n  this.autoScroll(0, 0);\n};\n","/*\n * KnownFlyingObject\n * =================\n *\n */\n\n'use strict';\n\nmodule.exports = KnownFlyingObject;\n\nvar moveSpeed = 2;\nvar flapStrength = 350;\nvar rotationSpeed = 0.25;\n\n\n\nfunction KnownFlyingObject(game, x, y) {\n  Phaser.Sprite.call(this, game, x, y, 'cow');\n\n  /* animations setup */\n  this.animations.add('flying', [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 20, true);\n  this.animations.add('standing', [16, 17, 18, 19, 20, 21, 22, 23], 20, true);\n  this.animations.add('falling', [24, 25, 26, 27, 28, 29, 30, 31], 20, true);\n  this.animations.add('dead', [16], 20, true);\n\n  this.game.physics.arcade.enableBody(this);\n  this.body.bounce.set(0.5);\n\n  // default animation\n  this.fly();\n\n  this.isDead = false;\n  this.isFalling = false;\n  this.timeAlive = 0;  // in s\n\n  this.spaceKey = this.game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);\n  this.game.input.keyboard.addKeyCapture([Phaser.Keyboard.SPACEBAR]);\n}\nKnownFlyingObject.prototype = Object.create(Phaser.Sprite.prototype);\nKnownFlyingObject.prototype.constructor = KnownFlyingObject;\n\nKnownFlyingObject.prototype.update = function () {\n  if (!this.isDead) {\n    /* flap on Spacebar or Mouse Click */\n    if (this.game.input.activePointer.isDown || this.spaceKey.isDown)\n    {\n      this.flap();\n    }\n\n    this.timeAlive += this.game.time.physicsElapsed;\n  }\n\n  var velocity = this.game.math.clamp(this.body.velocity.y, -350, 350);\n  var targetAngle = velocity / 350 * 10;\n\n  this.rotation = this.game.math.rotateToAngle(this.rotation, this.game.math.degToRad(targetAngle), rotationSpeed);\n\n  // console.log('TimeAlive: ' + this.timeAlive.toFixed(2));\n};\n\nKnownFlyingObject.prototype.fly = function () {\n  this.play('flying');\n};\n\nKnownFlyingObject.prototype.flap = function() {\n  this.body.velocity.y = -flapStrength;\n};\n\nKnownFlyingObject.prototype.hitGround = function() {\n  if (!this.isDead) {\n    this.isDead = true;\n\n    this.play('falling'); // looks funny, let's keep it at falling instead of Dead for now ;)\n  }\n\n  this.isFalling = false;\n};\n\nKnownFlyingObject.prototype.hitObstacle = function() {\n  if (!this.isDead) {\n    this.isDead = true;\n    this.isFalling = true;\n\n    this.play('falling');\n  }\n};\n\nKnownFlyingObject.prototype.getSpeed = function() {\n  return moveSpeed;\n};\n\nKnownFlyingObject.prototype.getTimeAlive = function() {\n  return this.timeAlive;\n};\n\n\n","/*\n * ObstacleSpawner\n * ===============\n *\n */\n\n'use strict';\n\nmodule.exports = ObstacleSpawner;\n\nvar spawnEveryS = 4;\n\nfunction ObstacleSpawner(game, obstaclesGroup) {\n  this.obstaclesGroup = obstaclesGroup;\n\n  this.spawnObstacle(1);\n\n  this.timer = game.time.create(false);\n  this.timer.loop(spawnEveryS * 1000, this.spawnObstacle, this, 1);\n  this.timer.start();\n}\n\nObstacleSpawner.prototype.update = function (difficultyLevel) {\n  /* difficultyLevel: current difficulty (raises with time) */\n\n};\n\nObstacleSpawner.prototype.spawnObstacle = function(difficultyLevel) {\n  this.obstaclesGroup.createObstacle(250);\n};\n\nObstacleSpawner.prototype.disable = function() {\n  this.timer.stop();\n};\n","/*\n * Obstacles\n * ====\n *\n */\n\n'use strict';\n\nmodule.exports = Obstacles;\n\nvar groundLevel = 70; // avoid to spawn gap in the ground\nvar spiderChance = 0.2; // chance to spawn a spider as top pipe\nvar destroyAfterX = -300;\n\nfunction Obstacles(game) {\n  Phaser.Group.call(this, game);\n}\nObstacles.prototype = Object.create(Phaser.Group.prototype);\nObstacles.prototype.constructor = Obstacles;\n\nObstacles.prototype.update = function () {\n  \n};\n\nObstacles.prototype.createObstacle = function(gapBetween) {\n  var rangeY = this.game.world.height - (gapBetween / 2) - groundLevel;\n  var targetY = this.game.rnd.integerInRange((gapBetween / 2), rangeY);\n  var targetX = this.game.world.width + 100;\n\n  var spawnTopSpider = this.game.rnd.frac() < spiderChance;\n  var topPipeSprite = spawnTopSpider ? 'spider' : 'log';\n  var topPipe = this.game.make.sprite(targetX, targetY - (gapBetween / 2), topPipeSprite);\n  topPipe.anchor.y = spawnTopSpider ? 1.0 : 0.0;\n  if (!spawnTopSpider)\n    topPipe.scale.y = -1;\n\n  var bottomPipe = this.game.make.sprite(targetX, targetY + (gapBetween / 2), 'log');\n  bottomPipe.anchor.y = 0.0;\n\n  this.game.physics.arcade.enableBody(topPipe);\n  topPipe.body.allowGravity = false;\n  topPipe.body.immovable = true;\n  topPipe.body.damping= 0;\n  topPipe.body.mass= 0.1;\n  this.game.physics.arcade.enableBody(bottomPipe);\n  bottomPipe.body.allowGravity = false;\n  bottomPipe.body.immovable = true;\n  bottomPipe.body.damping= 0;\n  bottomPipe.body.mass= 0.1;\n\n  this.add(topPipe);\n  this.add(bottomPipe);\n};\n\nObstacles.prototype.move = function(playerSpeed) {\n  var gameRef = this.game;\n  this.forEach(function(pipe) {\n    pipe.body.velocity.x = -playerSpeed * 200;\n\n    if (pipe.body.x < destroyAfterX) {\n      pipe.destroy();\n    } else {\n      gameRef.debug.body(pipe);\n    }\n  });\n};\n\nObstacles.prototype.disable = function() {\n  this.forEach(function(pipe) {\n    pipe.body.velocity.set(0);\n  });\n};\n","/*\n * Boot state\n * ==========\n *\n * The first state of the game, responsible for setting up some Phaser\n * features. Adjust the game appearance, number of input pointers, screen\n * orientation handling etc. using this game state.\n */\n\n'use strict';\n\nvar assets = require('../assets');\n\nexports.preload = function (game) {\n  // Point the Phaser Asset Loader to where your game assets live.\n  game.load.path = 'assets/';\n\n  // Initialize physics engines here. Remember that Phaser builds including\n  // Arcade Physics have it enabled by default.\n  //game.physics.startSystem(Phaser.Physics.P2);\n\n  // Adjust how many pointers Phaser will check for input events.\n  game.input.maxPointers = 2;\n\n  // Set the alignment of the game canvas within the page.\n  game.scale.pageAlignHorizontally = true;\n\n  // Adjust the scaling mode of the game canvas.\n  // Example: If you're developing a pixel-art game, set it to 'USER_SCALE'.\n  game.scale.scaleMode = Phaser.ScaleManager.NO_SCALE;\n\n  // When using 'USER_SCALE' scaling mode, use this method to adjust the\n  // scaling factor.\n  //game.scale.setUserScale(2);\n\n  // Uncomment the following line to adjust the rendering of the canvas to\n  // crisp graphics. Great for pixel-art!\n  //Phaser.Canvas.setImageRenderingCrisp(game.canvas);\n\n  // Uncomment this line to disable smoothing of textures.\n  //game.stage.smoothed = false;\n\n  // If the game canvas loses focus, keep the game loop running.\n  game.stage.disableVisibilityChange = true;\n\n  // Whether to use frame-based interpolations or not.\n  game.tweens.frameBased = false;\n\n  // Load the graphical assets required to show the splash screen later,\n  // using the asset pack data.\n  game.load.pack('boot', null, assets);\n};\n\nexports.create = function (game) {\n  // After applying the first adjustments and loading the splash screen\n  // assets, move to the next game state.\n  game.state.start('Preloader');\n};\n","/*\n * Game state\n * ==========\n *\n * The ingame state.\n */\n\n'use strict';\n\nvar KnownFlyingObject = require('../objects/KnownFlyingObject');\nvar Ground = require('../objects/Ground');\nvar Background = require('../objects/Background');\nvar Obstacles = require('../objects/Obstacles');\nvar ObstacleSpawner = require('../objects/ObstacleSpawner');\nvar GameOverOverlay = require('../objects/GameOverOverlay');\n\nvar gravityStrength = 1000;\nvar gameOverAfterX = -250;\n\nexports.preload = function (game) {\n  game.slickUI.load('ui/kenney/kenney.json');\n};\n\nexports.create = function (game) {\n  this.game.physics.startSystem(Phaser.Physics.ARCADE);\n  this.game.physics.arcade.gravity.y = gravityStrength;\n\n  this.kfo = new KnownFlyingObject(game, 20, 250);\n  this.ground = new Ground(game, 0, 0, 720, 720);\n  this.bg = new Background(game, 0, 0, 720, 720);\n\n  this.game.add.existing(this.bg);\n  this.game.add.existing(this.ground);\n  this.game.add.existing(this.kfo);\n\n  this.obstacles = new Obstacles(game);\n  this.obstacleSpawner = new ObstacleSpawner(game, this.obstacles);\n\n  this.isGameOver = false;\n};\n\nexports.update = function () {\n  if (!this.isGameOver) {\n    this.game.physics.arcade.collide(this.kfo, this.ground, function(objA) {\n      objA.hitGround();\n    });\n\n    this.game.physics.arcade.collide(this.kfo, this.obstacles, function(objA) {\n      objA.hitObstacle();\n    });\n\n    this.obstacles.move(this.kfo.getSpeed());\n\n    if (this.kfo.x < gameOverAfterX) {\n      this.gameOver();\n    }\n  }\n};\n\nexports.gameOver = function() {\n  if (!this.isGameOver) {\n    // this.ground.disable();\n    // this.bg.disable();\n    this.obstacleSpawner.disable();\n\n    this.isGameOver = true;\n\n    this.game.lastScore = this.kfo.getTimeAlive();\n\n    // show GameOverUI overlay\n    this.gameOverOverlay = new GameOverOverlay(this.game);\n  }\n};\n","/*\n * MainMenu state\n * ==============\n *\n */\n\n'use strict';\n\nexports.preload = function (game) {\n  game.slickUI.load('ui/kenney/kenney.json');\n}\n\nexports.create = function (game) {\n  var splash = game.add.image(0, 0, 'splash');\n\n  var button = new SlickUI.Element.Button(game.width / 2 - (140 / 2), game.height / 4 * 3, 140, 80);\n  game.slickUI.add(button);\n  button.add(new SlickUI.Element.Text(0, 0, 'Play')).center();\n  button.events.onInputUp.add(function() {\n    game.state.start('Game');\n  });\n};\n","/*\n * Preloader state\n * ===============\n *\n * Takes care of loading the main game assets, including graphics and sound\n * effects, while displaying a busy splash screen.\n */\n\n'use strict';\n\nvar assets = require('../assets');\n\nfunction showSplashScreen (game) {\n  // game.add.image(0, 0, 'flutter-splash-screen');\n  game.load.setPreloadSprite(game.add.image(82, 282, 'progress-bar'));\n}\n\nexports.preload = function (game) {\n  showSplashScreen(game);\n  game.load.pack('game', null, assets);\n\n  /* initialize plugins */\n  game.slickUI = game.plugins.add(Phaser.Plugin.SlickUI);\n  game.slickUI.load('ui/kenney/kenney.json');\n};\n\nexports.create = function (game) {\n  game.state.start('MainMenu');\n};\n","/*\n * `states` module\n * ===============\n *\n * Declares all present game states.\n * Expose the required game states using this module.\n */\n\n'use strict';\n\nexports.Boot = require('./Boot');\nexports.Preloader = require('./Preloader');\nexports.Game = require('./Game');\nexports.MainMenu = require('./MainMenu');\n"]}